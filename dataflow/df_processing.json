{
	"name": "df_processing",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "ds_data_lake_dsi",
						"type": "DatasetReference"
					},
					"name": "dsiData"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "ds_slow_moving_products",
						"type": "DatasetReference"
					},
					"name": "sink1"
				},
				{
					"dataset": {
						"referenceName": "ds_semi_slow_moving_products",
						"type": "DatasetReference"
					},
					"name": "sink2"
				},
				{
					"dataset": {
						"referenceName": "ds_fast_moving_products",
						"type": "DatasetReference"
					},
					"name": "sink3"
				}
			],
			"transformations": [
				{
					"name": "split1"
				}
			],
			"scriptLines": [
				"source(output(",
				"          item as string,",
				"          company_name as string,",
				"          days_sales_of_inventory as integer,",
				"          zero_inventory_count as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> dsiData",
				"dsiData split(days_sales_of_inventory > 500,",
				"     days_sales_of_inventory <= 500 && days_sales_of_inventory > 100,",
				"     days_sales_of_inventory < 100,",
				"     disjoint: false,",
				"     partitionBy('hash', 1)) ~> split1@(slowMovingProducts, semiSlowMovingProducts, fastMovingProducts)",
				"split1@slowMovingProducts sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> sink1",
				"split1@semiSlowMovingProducts sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> sink2",
				"split1@fastMovingProducts sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> sink3"
			]
		}
	}
}